{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","checkWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","connectWalletHandler","alert","mintNftHandler","provider","ethers","providers","Web3Provider","signer","getSigner","nftContract","Contract","abi","safeMint","nftTxn","wait","hash","useEffect","className","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iyJAwGeA,MAjGf,WAAgB,IAAD,EAE+BC,mBAAS,MAFxC,mBAENC,EAFM,KAEUC,EAFV,KAIPC,EAAsB,uCAAG,kCAAAC,EAAA,2DACRC,OAAbC,EADqB,EACrBA,SADqB,uBAI3BC,QAAQC,IAAI,0CAJe,0BAO3BD,QAAQC,IAAI,qCAPe,uBAUNF,EAASG,QAAQ,CAAEC,OAAQ,iBAVrB,OAYL,KAFlBC,EAVuB,QAYhBC,QACLC,EAAUF,EAAS,GACzBJ,QAAQC,IAAI,gCAAiCK,GAC7CX,EAAkBW,IAElBN,QAAQC,IAAI,+BAjBe,4CAAH,qDAqBtBM,EAAoB,uCAAG,gCAAAV,EAAA,+DACNC,QAAbC,EADmB,EACnBA,WAGNS,MAAM,4BAJmB,kBAQFT,EAASG,QAAQ,CAAEC,OAAQ,wBARzB,OAQnBC,EARmB,OASzBJ,QAAQC,IAAI,8BAA+BG,EAAS,IACpDT,EAAkBS,EAAS,IAVF,kDAYzBJ,QAAQC,IAAR,MAZyB,0DAAH,qDAgBpBQ,EAAc,uCAAG,sCAAAZ,EAAA,oEAEEC,SAAbC,EAFW,EAEXA,UAFW,wBAKXW,EAAW,IAAIC,IAAOC,UAAUC,aAAad,GAC7Ce,EAASJ,EAASK,YAClBC,EAAc,IAAIL,IAAOM,SAlDf,6CAkDyCC,EAAKJ,GAE9Dd,QAAQC,IAAI,sBATK,SAUEe,EAAYG,WAVd,cAUbC,EAVa,OAYjBpB,QAAQC,IAAI,yBAZK,UAaXmB,EAAOC,OAbI,QAejBrB,QAAQC,IAAR,iEAAsEmB,EAAOE,OAf5D,wBAkBjBtB,QAAQC,IAAI,kCAlBK,0DAsBnBD,QAAQC,IAAR,MAtBmB,0DAAH,qDA8CpB,OAJAsB,qBAAU,WACR3B,MACC,IAGD,sBAAK4B,UAAU,WAAf,UACE,wCACA,8BACG9B,EAdH,wBAAQ+B,QAAShB,EAAgBe,UAAU,6BAA3C,sBARA,wBAAQC,QAASlB,EAAsBiB,UAAU,mCAAjD,kCChESE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.212369e3.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.css';\nimport abi from './contracts/ABI.json';\nimport { ethers } from 'ethers';\n\nconst contractAddress = \"0xd1954846d3b257fed1f2dbb92da06339683615ad\";\n\nfunction App() {\n\n  const [currentAccount, setCurrentAccount] = useState(null);\n\n  const checkWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have Metamask installed!\");\n      return;\n    } else {\n      console.log(\"Wallet exists! We're ready to go!\")\n    }\n\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account: \", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  }\n\n  const connectWalletHandler = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      alert(\"Please install Metamask!\");\n    }\n\n    try {\n      const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n      console.log(\"Found an account! Address: \", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const mintNftHandler = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const nftContract = new ethers.Contract(contractAddress, abi, signer);\n\n        console.log(\"Initialize payment\");\n        let nftTxn = await nftContract.safeMint();\n\n        console.log(\"Mining... please wait\");\n        await nftTxn.wait();\n\n        console.log(`Mined, see transaction: https://goerli.etherscan.io/tx/${nftTxn.hash}`);\n\n      } else {\n        console.log(\"Ethereum object does not exist\");\n      }\n\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  const connectWalletButton = () => {\n    return (\n      <button onClick={connectWalletHandler} className='cta-button connect-wallet-button'>\n        Connect Wallet\n      </button>\n    )\n  }\n\n  const mintNftButton = () => {\n    return (\n      <button onClick={mintNftHandler} className='cta-button mint-nft-button'>\n        Mint NFT\n      </button>\n    )\n  }\n\n  useEffect(() => {\n    checkWalletIsConnected();\n  }, [])\n\n  return (\n    <div className='main-app'>\n      <h1>TP ECE</h1>\n      <div>\n        {currentAccount ? mintNftButton() : connectWalletButton()}\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}