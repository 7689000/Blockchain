{"ast":null,"code":"import _regeneratorRuntime from\"/workspace/nft-ece-tp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/workspace/nft-ece-tp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/workspace/nft-ece-tp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from'react';import'./App.css';import abi from'./contracts/ABI.json';import{ethers}from'ethers';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var contractAddress=\"0xd1954846d3b257fed1f2dbb92da06339683615ad\";function App(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),currentAccount=_useState2[0],setCurrentAccount=_useState2[1];var checkWalletIsConnected=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _window,ethereum,accounts,account;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_window=window,ethereum=_window.ethereum;if(ethereum){_context.next=6;break;}console.log(\"Make sure you have Metamask installed!\");return _context.abrupt(\"return\");case 6:console.log(\"Wallet exists! We're ready to go!\");case 7:_context.next=9;return ethereum.request({method:'eth_accounts'});case 9:accounts=_context.sent;if(accounts.length!==0){account=accounts[0];console.log(\"Found an authorized account: \",account);setCurrentAccount(account);}else{console.log(\"No authorized account found\");}case 11:case\"end\":return _context.stop();}}},_callee);}));return function checkWalletIsConnected(){return _ref.apply(this,arguments);};}();var connectWalletHandler=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var _window2,ethereum,accounts;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_window2=window,ethereum=_window2.ethereum;if(!ethereum){alert(\"Please install Metamask!\");}_context2.prev=2;_context2.next=5;return ethereum.request({method:'eth_requestAccounts'});case 5:accounts=_context2.sent;console.log(\"Found an account! Address: \",accounts[0]);setCurrentAccount(accounts[0]);_context2.next=13;break;case 10:_context2.prev=10;_context2.t0=_context2[\"catch\"](2);console.log(_context2.t0);case 13:case\"end\":return _context2.stop();}}},_callee2,null,[[2,10]]);}));return function connectWalletHandler(){return _ref2.apply(this,arguments);};}();var mintNftHandler=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var _window3,ethereum,provider,signer,nftContract,nftTxn;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_window3=window,ethereum=_window3.ethereum;if(!ethereum){_context3.next=16;break;}provider=new ethers.providers.Web3Provider(ethereum);signer=provider.getSigner();nftContract=new ethers.Contract(contractAddress,abi,signer);console.log(\"Initialize payment\");_context3.next=9;return nftContract.safeMint();case 9:nftTxn=_context3.sent;console.log(\"Mining... please wait\");_context3.next=13;return nftTxn.wait();case 13:console.log(\"Mined, see transaction: https://goerli.etherscan.io/tx/\".concat(nftTxn.hash));_context3.next=17;break;case 16:console.log(\"Ethereum object does not exist\");case 17:_context3.next=22;break;case 19:_context3.prev=19;_context3.t0=_context3[\"catch\"](0);console.log(_context3.t0);case 22:case\"end\":return _context3.stop();}}},_callee3,null,[[0,19]]);}));return function mintNftHandler(){return _ref3.apply(this,arguments);};}();var connectWalletButton=function connectWalletButton(){return/*#__PURE__*/_jsx(\"button\",{onClick:connectWalletHandler,className:\"cta-button connect-wallet-button\",children:\"Connect Wallet\"});};var mintNftButton=function mintNftButton(){return/*#__PURE__*/_jsx(\"button\",{onClick:mintNftHandler,className:\"cta-button mint-nft-button\",children:\"Mint NFT\"});};useEffect(function(){checkWalletIsConnected();},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"main-app\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"TP ECE\"}),/*#__PURE__*/_jsx(\"div\",{children:currentAccount?mintNftButton():connectWalletButton()})]});}export default App;","map":{"version":3,"sources":["/workspace/nft-ece-tp/src/App.js"],"names":["useEffect","useState","abi","ethers","contractAddress","App","currentAccount","setCurrentAccount","checkWalletIsConnected","window","ethereum","console","log","request","method","accounts","length","account","connectWalletHandler","alert","mintNftHandler","provider","providers","Web3Provider","signer","getSigner","nftContract","Contract","safeMint","nftTxn","wait","hash","connectWalletButton","mintNftButton"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.css';\nimport abi from './contracts/ABI.json';\nimport { ethers } from 'ethers';\n\nconst contractAddress = \"0xd1954846d3b257fed1f2dbb92da06339683615ad\";\n\nfunction App() {\n\n  const [currentAccount, setCurrentAccount] = useState(null);\n\n  const checkWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have Metamask installed!\");\n      return;\n    } else {\n      console.log(\"Wallet exists! We're ready to go!\")\n    }\n\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account: \", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  }\n\n  const connectWalletHandler = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      alert(\"Please install Metamask!\");\n    }\n\n    try {\n      const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n      console.log(\"Found an account! Address: \", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const mintNftHandler = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const nftContract = new ethers.Contract(contractAddress, abi, signer);\n\n        console.log(\"Initialize payment\");\n        let nftTxn = await nftContract.safeMint();\n\n        console.log(\"Mining... please wait\");\n        await nftTxn.wait();\n\n        console.log(`Mined, see transaction: https://goerli.etherscan.io/tx/${nftTxn.hash}`);\n\n      } else {\n        console.log(\"Ethereum object does not exist\");\n      }\n\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  const connectWalletButton = () => {\n    return (\n      <button onClick={connectWalletHandler} className='cta-button connect-wallet-button'>\n        Connect Wallet\n      </button>\n    )\n  }\n\n  const mintNftButton = () => {\n    return (\n      <button onClick={mintNftHandler} className='cta-button mint-nft-button'>\n        Mint NFT\n      </button>\n    )\n  }\n\n  useEffect(() => {\n    checkWalletIsConnected();\n  }, [])\n\n  return (\n    <div className='main-app'>\n      <h1>TP ECE</h1>\n      <div>\n        {currentAccount ? mintNftButton() : connectWalletButton()}\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}