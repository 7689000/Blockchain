[{"/Users/hugojaouen/Desktop/Blockchain/src/index.js":"1","/Users/hugojaouen/Desktop/Blockchain/src/reportWebVitals.js":"2","/Users/hugojaouen/Desktop/Blockchain/src/App.js":"3"},{"size":500,"mtime":1668036828996,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1668036828996,"results":"6","hashOfConfig":"5"},{"size":6378,"mtime":1668036916126,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"lq9aof",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"/Users/hugojaouen/Desktop/Blockchain/src/index.js",[],"/Users/hugojaouen/Desktop/Blockchain/src/reportWebVitals.js",[],"/Users/hugojaouen/Desktop/Blockchain/src/App.js",["15","16","17","18","19"],"import { useEffect, useState } from 'react';\nimport './App.css';\n\nimport abi from './contracts/ABI.json';\nimport { ethers } from 'ethers';\n\nconst contractAddress = \"0xF786878156D6d0964CA078D8EB3D7fC89D25d6C2\";\n\nfunction App() {\n\n\n  const [currentAccount, setCurrentAccount] = useState(null);\n\n  const checkWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have Metamask installed!\");\n      return;\n    } else {\n      console.log(\"Wallet exists! We're ready to go!\")\n    }\n\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account: \", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  }\n\n  const connectWalletHandler = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      alert(\"Please install Metamask!\");\n    }\n\n    try {\n      const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n      console.log(\"Found an account! Address: \", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const mintNftHandler = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const nftContract = new ethers.Contract(contractAddress, abi, signer);\n\n        console.log(\"Initialize payment\");\n        let nftTxn = await nftContract.safeMint(\"0xeF607f7db89b9E3450B80C5C0D280b2299989231\",\"0x7c0bE6FfDB66b42D51Ca3782A13267769bcAeEb5\",\"https://jsonkeeper.com/b/HHEY\");\n\n        console.log(\"Mining... please wait\");\n        await nftTxn.wait();\n\n        console.log(\"Mined, see transaction: https://goerli.etherscan.io/tx/${nftTxn.hash}\");\n\n      } else {\n        console.log(\"Ethereum object does not exist\");\n      }\n\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  const connectWalletButton = () => {\n    return (\n      <button onClick={connectWalletHandler} className='cta-button connect-wallet-button'>\n        Connect Wallet\n      </button>\n    )\n  }\n\n  const mintNftButton = () => {\n    return (\n      <button onClick={mintNftHandler} className='cta-button mint-nft-button'>\n        Mint NFT\n      </button>\n    )\n  }\n\n  useEffect(() => {\n    checkWalletIsConnected();\n  }, [])\n\n  return (\n    <div className='main-app'>\n      <div class=\"snowflakes\" aria-hidden=\"flase\">  \n        <div class=\"snowflake\">\n        ❅ \n        </div>\n        <div class=\"snowflake\">\n        ❅ \n        </div>\n        <div class=\"snowflake\">\n        ❅ \n        </div>\n        <div class=\"snowflake\">\n        ❅ \n        </div>\n        <div class=\"snowflake\">\n        ❅ \n        </div>\n        <div class=\"snowflake\">\n        ❅ \n        </div>\n        <div class=\"snowflake\">\n        ❅ \n        </div>\n        <div class=\"snowflake\">\n        ❅ \n        </div>\n        <div class=\"snowflake\">\n        ❅ \n        </div>\n        <div class=\"snowflake\">\n        ❅ \n        </div>\n        <div class=\"snowflake\">\n        ❅ \n        </div>\n        <div class=\"snowflake\">\n        ❅ \n        </div>\n        <div class=\"snowflake\">\n        ❅ \n        </div>\n        <div class=\"snowflake\">\n        ❅ \n        </div>\n        <div class=\"snowflake\">\n        ❅ \n        </div>\n        <div class=\"snowflake\">\n        ❅ \n        </div>\n        <div class=\"snowflake\">\n        ❅ \n        </div>\n        <div class=\"snowflake\">\n        ❅ \n        </div>\n        <div class=\"snowflake\">\n        ❅ \n        </div>\n        <div class=\"snowflake\">\n        ❅ \n        </div>\n      </div>\n\n      <div id=\"header\">  \n    <h1>HO HO HO</h1>\n    <h2>C'est la fin de l'année... Les fêtes approchent et le Bitcoin est au plus bas. Vous n'avez plus aucun Ethere dans vos poches...</h2>\n    <h2>Offrez des <b>NFT</b> pour NOEL! C'est a la mode et tout le monde pense que ca coute super cher</h2>\n</div>\n\n\n<div id=\"megaform\" >  \n\n<div id=\"form1\" >  \n    <h3>Etape 1 : Créez le NFT!</h3>\n\n    <p>Donnez un nom à votre cadeau!</p> \n    <input type=\"text\" id=\"fname\" placeholder=\"Nom du cadeau\"></input>\n\n    <p>Quelle message voulez vous lui dire?</p>\n    <input type=\"text\" id=\"fmessage\" placeholder=\"Message\"></input>\n\n    <p>Entrez l'URL de l'image que vous voulez offrire!</p>\n    <input type=\"text\" id=\"fimg\" placeholder=\"Lien Image\"></input>\n\n    <br></br>\n    <button type=\"button\" id=\"mybutton\">Etape suivante!</button> \n    <br></br>\n</div>\n\n\n<div id=\"form2\"> \n<h3>Etape 2 : Emballez le NFT!</h3>\n\n<div id=\"jsontext\">\n\n    <h4>\"title\": \"Asset Metadata\",</h4>   \n    <h4> \"type\": \"object\"  ,</h4> \n        <h4> \"properties\": {\"{\"}</h4>\n            <h4> \"type\": \"string\",</h4>          \n            <h4> \"description\": \"<a id=\"modnom\">Nom</a>\"</h4>       \n\n                <h4>\"type\": \"string\",</h4>          \n                <h4>\"description\": \"<a id=\"modmess\">Message</a>\"</h4>          \n   \n                    <h4>\"type\": \"string\",</h4>         \n                    <h4> \"description\": \"<a id=\"modurl\">URL</a>\"</h4>        \n                  \n</div>\n\n    <button type=\"button\" id=\"mybutton\" onclick=\"copyDivToClipboard()\">Copier le texte</button> \n\n    <p>Après avoir copié le texte, le coller sur la page JSON KEPPER et récuperer le lien</p>\n   \n    <form action=\"https://www.jsonkeeper.com\" method=\"get\" target=\"_blank\">  \n        <button type=\"submit\">Aller sur Json keeper</button>\n     </form>\n    <br></br>\n\n    </div >\n\n    <div id=\"form3\" > \n    <h3>Etape 3 : Offrez le NFT!</h3>\n\n    <p>Quelle est votre clée?</p>\n    <input type=\"text\" id=\"fcled\" placeholder=\"Votre Clée\"></input>\n\n    <p>Quelle est la clé du destinataire?</p>\n    <input type=\"text\" id=\"fcler\" placeholder=\"Clée du Destinataire\"></input>\n\n    <p>Quelle est le lien que vous avez obtenu?</p>\n    <input type=\"text\" id=\"flienjson\" placeholder=\"Clée du Destinataire\"></input>\n\n    <br></br>\n    <button type=\"button\" id=\"mybuttonfinal\">Envoyer le Cadeau!</button>\n    <br></br>\n    <h3>Enfin, cliquez sur le gros bouton!</h3>\n    <div>\n        {currentAccount ? mintNftButton() : connectWalletButton()}\n      </div>\n    </div>\n \n</div>\n\n\n      \n</div>\n  )\n}\n\nexport default App;",{"ruleId":"20","severity":1,"message":"21","line":66,"column":21,"nodeType":"22","messageId":"23","endLine":66,"endColumn":92},{"ruleId":"24","severity":1,"message":"25","line":99,"column":31,"nodeType":"26","endLine":99,"endColumn":50},{"ruleId":"27","severity":1,"message":"28","line":198,"column":34,"nodeType":"29","endLine":198,"endColumn":49},{"ruleId":"27","severity":1,"message":"28","line":201,"column":37,"nodeType":"29","endLine":201,"endColumn":53},{"ruleId":"27","severity":1,"message":"28","line":204,"column":42,"nodeType":"29","endLine":204,"endColumn":57},"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","jsx-a11y/aria-proptypes","The value for aria-hidden must be a boolean.","JSXAttribute","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement"]